trigger:
  branches:
    include:
    - 104957_Move_New_FrontEnd_to_Radix #TODO

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-infra
    endpoint: 'equinor'

# Global variables for the pipeline
variables:
 - template: templates/variables/procosys-web-variables.yml@templates
 - template: templates/variables/procosys-global-variables.yml@templates
 - template: templates/variables/frontend-variables.yml@templates

 - name: 'repositoryName'
   value: procosys/frontend

stages:
# build_and_test stage. Yarn test, Docker build, tag and push
- stage: build_and_test
  displayName: 'Build & Test'
  variables:
    envName: 'build_and_test'
    envRg: '${{ variables.envRgName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    containerRegistry: '${{ variables.containerRegistryName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    dockerfilePath: '/Dockerfile'
    dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

  jobs:
  - template: /templates/pipelines/dockerbuild-frontend.yml@templates
    parameters:
      deploymentName: 'docker_build_push'
      dependsOn: ''
      env: '${{ variables.envName }}'
      envGroup: '${{ variables.envGroupName }}'
      dockerfilePath: ${{ variables.dockerfilePath }}
      buildContext: '$(Build.SourcesDirectory)'
      repository: ${{ variables.repositoryName }}
      dockerRegistryServiceConnection: $(dockerRegistryServiceConnectionName)

# Deploy to dev environment
- stage: DeployDev
  displayName: 'Deploy to dev'
  dependsOn: 'build_and_test'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/104957_Move_New_FrontEnd_to_Radix'))  #TODO
  variables:
    envName: 'dev'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'

  jobs:
    - deployment: Deploy
      displayName: Deploy Frontend
      environment: '${{ variables.envGroupName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:   
              # Deploy to Radix
              - template: templates/radix-deploy.yml
                parameters:
                  imageTagNamesFrontend: '${{ variables.versionNumber }}$(Build.BuildId)'

# deploy to test environment
- stage: DeployTest
  displayName: 'Promote to test'
  dependsOn: 'DeployDev'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/104957_Move_New_FrontEnd_to_Radix'))  #TODO
  variables:
    envName: 'test'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    radixPromoteFromEnv: 'dev'
    radixJobName: $[ stageDependencies.DeployDev.Deploy.outputs['Deploy.RADIXJOB.radixJobName'] ] # This variable must have been set by previous step

  jobs:
    - deployment: Deploy
      displayName: Promote
      environment: '${{ variables.envGroupName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              # Promote to test
              - template: templates/radix-promote-env.yml
                parameters:
                  fromEnvironment: $(radixPromoteFromEnv)
                  toEnvironment: $(envName)
                  deploymentName: $(radixJobName)

# deploy to production environment
- stage: DeployProd
  displayName: 'Promote to production'
  dependsOn: 'DeployTest'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/104957_Move_New_FrontEnd_to_Radix')) #TODO
  variables:
    envName: 'prod'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    radixPromoteFromEnv: 'test'
    radixJobName: $[ stageDependencies.DeployTest.Deploy.outputs['Deploy.RADIXJOB.radixJobName'] ] # This variable must have been set by previous step

  jobs:
    - deployment: Deploy
      displayName: Promote
      environment: '${{ variables.envGroupName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              # Promote to prod
              - template: templates/radix-promote-env.yml
                parameters:
                  fromEnvironment: $(radixPromoteFromEnv)
                  toEnvironment: $(envName)
                  deploymentName: $(radixJobName)
