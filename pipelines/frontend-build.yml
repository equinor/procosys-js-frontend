trigger: none

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-preservation-infra
    endpoint: 'Preservation - Frontend'

# Global variables for the pipeline
variables:
 - template: templates/variables/preservation-variables.yml@templates
 - template: templates/variables/procosys-global-variables.yml@templates

 - name: 'repositoryName'
   value: procosys/frontend

stages:
# common stage. Docker build, tag and push
- stage: common
  displayName: 'Common'
  variables:
    envName: 'common'
    envRg: '${{ variables.envRgName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    appServicePlan: '${{ variables.nonProdappServicePlanName }}'
    containerRegistry: '${{ variables.containerRegistryName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    dockerfilePath: '/.docker/Dockerfile'
    dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

  jobs:

  - job: 'json' 
    displayName: 'set_json_values'
    dependsOn: ''
    steps:
      - task: geeklearningio.gl-vsts-tasks-file-patch.json-patch-task.JsonPatch@3
        displayName: 'Patch files settings.json'
        inputs:
          JsonWorkingDir: '$(Build.SourcesDirectory)'
          JsonTargetFilters: settings.template.json
          JsonPatchContent: |
            + /auth/clientId => "$(clientId)"
            + /auth/authority => "$(authority)"
            + /auth/defaultScopes => $(defaultScopes)

            + /externalResources/procosysApi/url => "$(procosysApiUrl)"
            + /externalResources/procosysApi/scope => $(procosysApiScope)
            + /externalResources/procosysApi/version => "$(procosysApiVersion)"
            
            + /externalResources/graphApi/url => "$(graphApiUrl)"
            + /externalResources/graphApi/scope => $(graphApiScope)
            + /externalResources/graphApi/version => "$(graphApiVersion)"
          OutputPatchFile: true
          FailIfNoPatchApplied: true

      - task: PowerShell@2
        inputs:
          script: Rename-Item $(Build.SourcesDirectory/settings.template.json settings.json
          

  - template: /templates/pipelines/dockerbuild.yml@templates
    parameters:
      deploymentName: 'docker_build_push'
      dependsOn: 'json'
      env: '${{ variables.envName }}'
      envGroup: '${{ variables.envGroupName }}'
      dockerfilePath: ${{ variables.dockerfilePath }}
      repository: ${{ variables.repositoryName }}
      dockerRegistryServiceConnection: $(dockerRegistryServiceConnectionName)

# Dev deploy stage
- stage: dev
  displayName: 'Dev'
  variables:
    envName: 'dev'
    envRg: '${{ variables.envRgName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    appServicePlan: '${{ variables.nonProdappServicePlanName }}'
    containerRegistry: '${{ variables.containerRegistryName }}' 

  jobs:

  - template: /templates/pipelines/webapprelease.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'publish_container_to_webapp'
      serviceConnection: '${{ variables.serviceConnection }}'
      webApp: '${{ variables.frontendWebAppName }}'
      envGroup: '${{ variables.envGroupName }}'
      envRg: '${{ variables.envRg }}'
      env: '${{ variables.envName }}'
      containerRegistry: '${{ variables.containerRegistry }}'
      repository: ${{ variables.repositoryName }}