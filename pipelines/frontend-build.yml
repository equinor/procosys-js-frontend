trigger:
  branches:
    include:
    - master

resources:
  repositories:
  - repository: self
  - repository: templates
    type: github
    name: equinor/procosys-infra
    endpoint: 'equinor'

# Global variables for the pipeline
variables:
 - template: templates/variables/procosys-global-variables.yml@templates
 - template: templates/variables/frontend-variables.yml@templates

 - name: 'repositoryName'
   value: procosys/frontend

stages:
# Build Stage
- stage: build
  displayName: 'Build'
  variables:
    envName: 'build'
    serviceConnection: '${{ variables.nonProdServiceConnection }}'
    containerRegistry: '${{ variables.containerRegistryName }}'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    dockerfilePath: '/Dockerfile'
    dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

  jobs:
   # Docker Build
  - template: /templates/pipelines/dockerbuild-frontend.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'docker_build'
      condition: and(always(), eq(variables['Build.Reason'], 'PullRequest'))
      buildCommand: build
      envGroup: '${{ variables.envGroupName }}'
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

    # Docker Build and Push
  - template: /templates/pipelines/dockerbuild-frontend.yml@templates
    parameters:
      dependsOn: ''
      deploymentName: 'docker_build_push'
      condition: and(always(), ne(variables['Build.Reason'], 'PullRequest'))
      buildCommand: buildAndPush
      envGroup: '${{ variables.envGroupName }}'
      dockerfilePath: '${{ variables.dockerfilePath }}'
      buildContext: '$(Build.SourcesDirectory)'
      repository: '${{ variables.repositoryName }}'
      dockerRegistryServiceConnection: '$(dockerRegistryServiceConnectionName)'

# Deploy to dev environment
- stage: DeployDev
  displayName: 'Deploy to Dev'
  dependsOn: 'build'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    envName: 'dev'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'

  jobs:
    - deployment: Deploy
      displayName: Deploy Frontend
      environment: '${{ variables.envGroupName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:   
              # Deploy to Radix
              - template: templates/radix-deploy.yml
                parameters:
                  imageTagNamesFrontend: '${{ variables.versionNumber }}$(Build.BuildId)'

# deploy to test environment
- stage: DeployTest
  displayName: 'Deploy to Test'
  dependsOn: 'DeployDev'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  variables:
    envName: 'test'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    radixPromoteFromEnv: 'dev'
    radixJobName: $[ stageDependencies.DeployDev.Deploy.outputs['Deploy.RADIXJOB.radixJobName'] ] # This variable must have been set by previous step

  jobs:
    - deployment: Deploy
      displayName: Promote
      environment: '${{ variables.envGroupName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              # Promote to test
              - template: templates/radix-promote-env.yml
                parameters:
                  fromEnvironment: $(radixPromoteFromEnv)
                  toEnvironment: $(envName)
                  deploymentName: $(radixJobName)

# deploy to prod environment
- stage: DeployProd
  displayName: 'Deploy to Prod'
  dependsOn: 'DeployTest'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  variables:
    envName: 'prod'
    envGroupName: '$(globalPrefix)-$(fullAppName)-${{ variables.envName }}'
    radixPromoteFromEnv: 'test'
    radixJobName: $[ stageDependencies.DeployTest.Deploy.outputs['Deploy.RADIXJOB.radixJobName'] ] 

  jobs:
    - deployment: Deploy
      displayName: Promote
      environment: '${{ variables.envGroupName }}'
      pool:
        vmImage: 'windows-latest'
      strategy:
        runOnce:
          deploy:
            steps:
              # Promote to prod
              - template: templates/radix-promote-env.yml
                parameters:
                  fromEnvironment: $(radixPromoteFromEnv)
                  toEnvironment: $(envName)
                  deploymentName: $(radixJobName)