parameters:
  - name: radixResource
    default: 6dae42f8-4368-4678-94ff-3960e28e3630 # Azure Kubernetes Service AAD Server

  - name: radixApplication
    default: procosys-js-frontend

  - name: radixUrl
    default: https://api.radix.equinor.com/api/v1
    displayName: Host of radix api, including version 

  - name: serviceConnection
    default: 'procosys - non-prod'
    displayName: 'Service Connection'

  - name: imageTagNamesFrontend
    type: string
    displayName: 'Image tag name for frontend'

steps:
- task: AzureCLI@2
  displayName: Trigger deploy to radix
  name: RADIXJOB
  inputs:
    azureSubscription: ${{ parameters.serviceConnection }}
    addSpnToEnvironment: true
    scriptType: pscore
    scriptLocation: 'inlineScript'
    FailOnStandardError: true
    inlineScript: |
      $token = az account get-access-token --resource ${{ parameters.radixResource }} --query=accessToken -otsv
      ## Get current branch
      $body = ConvertTo-Json @{ 
        imageTagNames = @{ 'frontend'='${{ parameters.imageTagNamesFrontend }}'; }  
        toEnvironment = 'dev'     
        triggeredBy = 'Azure-Devops ($(Build.RequestedFor))'
      } 
      Write-Host "Sending payload: $body"
      $radixUrl = "${{ parameters.radixUrl }}/applications/${{ parameters.radixApplication }}/pipelines/deploy"
      Write-Host "Sending POST to $radixUrl"
      $resp = Invoke-RestMethod -Method Post -Uri $radixUrl -Headers @{"Authorization" = "Bearer $token"; "Content-Type" = "application/json" } -Body $body
      Write-Host $resp
      $jobName = $resp.name
      $checkUrl = "${{ parameters.radixUrl }}/applications/${{ parameters.radixApplication }}/jobs/$jobName"
      $checkStarted = Get-Date
      while ($true) {
        Write-Host "Checking status..."
        $checkResp = Invoke-RestMethod -Uri $checkUrl -Headers @{"Authorization" = "Bearer $token" }                        
        
        Write-Host (ConvertTo-Json $checkResp -Depth 10 -Compress)
        ## We want to stop when status -not Running || Waiting
        if ($checkResp.status -ne "Running" -and $checkResp.status -ne "Waiting") {              
          break;
        }
        
        if ( ((Get-Date) - $checkStarted).Seconds -gt 600) {
          Write-Host "Timeout..."
          throw "Radix job took over 600 seconds, aborting..."
        }
        Start-Sleep -Seconds 10
      }
      ## Do a last check for status -> If failed, write ERROR using #VSO commands 
      Write-Host "Final status check..."
      $checkResp = Invoke-RestMethod -Uri $checkUrl -Headers @{"Authorization" = "Bearer $token" }   
      if ($checkResp.status -ne "Succeeded") {              
        Write-Host "##vso[task.logissue type=error]Deployment to Radix failed."
        throw "Radix deployment failed"
      }
      
      ## The deployment in Radix will have an id (or deployment name). This id is needed later to be able to promote the deployment. We set a variable called radixJobName here, that is used later in the promote script. 
      $deploymentName = $checkResp.deployments | select -Property name | select -First 1 -ExpandProperty name
      Write-Host "Setting deployment name: $deploymentName"
      Write-Host "##vso[task.setvariable variable=radixJobName;isOutput=true;]$deploymentName"